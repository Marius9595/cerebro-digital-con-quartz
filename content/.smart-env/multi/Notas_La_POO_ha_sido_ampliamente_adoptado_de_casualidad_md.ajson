
"smart_sources:Notas/La POO ha sido ampliamente adoptado de casualidad.md": {"path":"Notas/La POO ha sido ampliamente adoptado de casualidad.md","last_embed":{"hash":null},"embeddings":{},"last_read":{"hash":"9agbrk","at":1754845528230},"class_name":"SmartSource","last_import":{"mtime":1754845505199,"size":967,"at":1754845528231,"hash":"9agbrk"},"blocks":{"#---frontmatter---":[1,7],"##¿Por qué?":[8,12],"##¿Por qué?#{1}":[10,12]},"outlinks":[{"title":"Why Isn't Functional Programming the Norm","target":"Why Isn't Functional Programming the Norm","line":2},{"title":"La encapsulación de la POO es modularidad sobre el estado de un objeto","target":"La encapsulación de la POO es modularidad sobre el estado de un objeto","line":10},{"title":"Modularidad","target":"Modularidad","line":10},{"title":"POO","target":"POO","line":10},{"title":"POO","target":"POO","line":10},{"title":"La herencia es una funcionalidad de OOP que se intenta evitar, y hasta a veces se considera mala práctica","target":"La herencia es una funcionalidad de OOP que se intenta evitar, y hasta a veces se considera mala práctica","line":12},{"title":"Los métodos y objetos son un  sintax sugar  de procedimientos y structs si no está la herencia en medio","target":"Los métodos y objetos son un  sintax sugar  de procedimientos y structs si no está la herencia en medio","line":12},{"title":"POO","target":"POO","line":12}],"metadata":{"video":"[[Why Isn't Functional Programming the Norm]]","minutoInicio":"24:00","minutoFin":"35:45","tags":null,"num_veces_leida":0}},